version: 2.1

workflows: #define workflow - sequence of jobs
  version: 2
  build: #name of workflow
    jobs:
      - build: #first job to run
          filters:
            branches:
              only:
                - main #job will only run on main branch
      - deploy: #second job to run
          filters:
            branches:
              only:
                - main #job will only run on main branch
          requires:
            - build #job will only run if the previous job, build, is succressful

jobs: #define jobs section
  build:
    working_directory: ~/contact-server #set working dir in container to contact-server
    docker:
      - image: cimg/node:20.17.0 #updated to use a version compatible with npm 11.2.0
    steps:
      - checkout #step 1 - checkout code from repo
      - setup_remote_docker #next step - allow docker commands inside job
      - run: #install specific version of npm
          name: update-npm
          command: 'sudo npm install -g npm@10.5.0' #use compatible npm version, not latest to avoid version issues
      - restore_cache: #speed up build by restoring cached dependencies
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run: #install npm dependencies
          name: install-npm-dependencies
          command: npm install
      - save_cache: #save node_modules into cache for use in future builds
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run: #run any unit tests defined in npm run test
          name: test-run
          command: npm run test
      - run: #log into docker hub using environment variables stored in circleci
          name: docker-login
          command: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - run: #build a docker image using the Dockerfile in the repo
          name: Build Docker Image
          command: docker build -t $IMAGE_NAME:latest .
      - run: #push built docker image to docker hub
          name: Publish Docker Image
          command: docker push $IMAGE_NAME
      - run: #set environment variables and save values into files called server.crt and privatekey.pem with proper formatting
          name: set-environment-variables
          command: |
            echo "Creating certificate files..."

            # Generate self-signed certificates for testing
            mkdir -p ./certs
            echo "Installing OpenSSL for certificate generation"
            sudo apt-get update && sudo apt-get install -y openssl

            # Create self-signed certificate
            echo "Generating self-signed certificate..."
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout ./certs/privatekey.pem -out ./certs/server.crt \
              -subj "/CN=localhost"
            
            # Copy to expected locations with correct permissions
            cp ./certs/privatekey.pem privatekey.pem
            cp ./certs/server.crt server.crt
            chmod 644 privatekey.pem server.crt
            
            # Verify the files have the correct format and permissions
            echo "Verifying certificate files format:"
            ls -la privatekey.pem server.crt
            head -3 server.crt
            tail -3 server.crt
            head -3 privatekey.pem
            tail -3 privatekey.pem
      - run: #create docker container for integration env
          name: build-docker-image-for-integration-environment
          command: docker create -p 8080:8080 -p 8443:8443 --name $CONTAINER_NAME $IMAGE_NAME
      - run: #copy cert and private key into container
          name: copy-server-cert-and-private-key-across
          command: |
            # Use docker cp with permission preservation
            docker cp ./privatekey.pem $CONTAINER_NAME:/privatekey.pem
            docker cp ./server.crt $CONTAINER_NAME:/server.crt
      - run: #start the docker container
          name: start-docker-container
          command: docker start $CONTAINER_NAME
      - run: #fix permissions inside the container after it starts
          name: fix-certificate-permissions
          command: |
            docker exec $CONTAINER_NAME sh -c "chmod 644 /privatekey.pem /server.crt && chown nodeuser:nodeuser /privatekey.pem /server.crt"
      - run: #wait for container to fully start
          name: wait-for-container
          command: sleep 10
      - run: #verify certificate files
          name: verify-certificate-files
          command: |
            echo "Verifying certificate files in container..."
            docker exec $CONTAINER_NAME ls -la /privatekey.pem /server.crt
            docker exec $CONTAINER_NAME bash -c "cat /privatekey.pem | head -3" || echo "Failed to read private key"
            docker exec $CONTAINER_NAME bash -c "cat /server.crt | head -3" || echo "Failed to read certificate"
      - run: #wait additional time for services to initialize
          name: wait-for-services
          command: sleep 10
      - run: #check container logs
          name: check-container-logs
          command: docker logs $CONTAINER_NAME
      - run:
          name: verify-https
          command: |
            CONTAINER_IP=$(docker inspect $CONTAINER_NAME --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
            echo "Container IP: $CONTAINER_IP"
            echo "Checking ports in container..."
            docker exec $CONTAINER_NAME bash -c "netstat -tuln || echo netstat not available"
            echo "Testing HTTP connection..."
            docker run --rm curlimages/curl:7.78.0 curl -v http://$CONTAINER_IP:8080/health || echo "HTTP not responding"
            echo "Testing HTTPS connection..."
            docker run --rm curlimages/curl:7.78.0 curl -k -v https://$CONTAINER_IP:8443/health || echo "HTTPS not responding"
      - run: #run security scan using zap-baseline
          name: run-zap-scan-against-container
          command: |
            CONTAINER_IP=$(docker inspect $CONTAINER_NAME --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
            echo "Running ZAP scan against HTTPS server at $CONTAINER_IP:8443"
            # Try HTTP first if HTTPS is not working
            if docker run --rm curlimages/curl:7.78.0 -s -k https://$CONTAINER_IP:8443/health > /dev/null; then
              echo "HTTPS connection successful, proceeding with HTTPS scan"
              docker run -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://$CONTAINER_IP:8443 -P 8443 -I -d --autooff -z "-config certificate.use=true -config certificate.ignore=true"
            else
              echo "HTTPS connection failed, falling back to HTTP scan"
              docker run -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://$CONTAINER_IP:8080 -P 8080 -I -d
            fi
  deploy: #start of deploy job
    docker:
      - image: cimg/node:20.17.0 #updated to match build job version
    steps:
      - checkout # Add checkout step to access local deploy.sh
      - run:
          name: deploy-application #ssh into aws ec2 instance, export env variables and run deploy.sh to deploy app
          command: ssh -p 5454 -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_PUBLIC_DNS "export SERVER=\"$SERVER\"; export IMAGE_NAME=\"$IMAGE_NAME\"; export PRIVATE_KEY=\"$PRIVATE_KEY\"; export CONTAINER_NAME=\"$CONTAINER_NAME\"; rm -rf ~/contact-server/; git clone https://github.com/fn-nci/contact-server.git; source contact-server/deploy.sh;"
